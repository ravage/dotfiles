" disable vi compatible mode
set nocompatible

filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

setlocal foldmethod=marker

" encoding to utf-8
set encoding=utf-8

" enable 256 colors
set t_Co=256

" keep 100 last commands
set history=100

" enable mouse in all modes
set mouse=a

" always set autoindenting on
set autoindent
set smartindent

" enable syntax highlighting
syntax enable

" enable file type detection.
filetype plugin indent on

" show partial commands
set showcmd

" show current mode
set showmode

" intuitive backspacing
set backspace=indent,eol,start

" don't unload buffers
set hidden

" enable command line completion
set wildmenu

" show complete list of possible matches
set wildmode=list:longest

" ignore case while searching
set ignorecase

" make case sensitive if search term has capitals
set smartcase

" display line numbers
set number

" position in a buffer
set ruler

" highlight search matches while typing
set incsearch

" highlight all search matches
set hlsearch

" wrap lines
set wrap

" number of line to keep above and below the cursos
set scrolloff=3

" change terminal title
set title

" disable beep
set visualbell

" don't create backup file ~
set nobackup
set nowritebackup

" tidy up swap files
set directory=$HOME/.vim/tmp/

" global tab width
set tabstop=2

" number of spaces for indentation
set shiftwidth=2

set softtabstop=2

" use spaces instead of tabs
set expandtab

" always show status line
set laststatus=2

" chars to be listed, tabs and whitspaces
set listchars=tab:▸\ ,trail:.,eol:¬
"set listchars=tab:▸\ ,trail:·,eol:

set tags=tags

runtime macros/matchit.vim

" status line
set statusline=[%n]\ %f%m%r%h%w%=\ [format=%{&ff}]\ [encoding=%{&fenc}]\ [type=%y]\ [ascii=\%03.3b]\ [hex=\%02.2b]\ [pos=%04l,%04v][%p%%]\ [len=%l]

" set colorscheme
"colorscheme fragmentized
let g:zenburn_high_Contrast = 1
colorscheme zenburn

" change default shortcut key \ to ,
let mapleader=","

" TagList config
let generate_tags = 1
let Tlist_Compact_Format = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Sort_Type = 'name'
" 1

" Mappings

" Shortcut to view/hide hidden characters
map <Leader>sc :set list!<CR>
nmap <Leader>$ :call Preserve("%s/\\s\\+$//e")<CR>
" 1

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78
autocmd FileType c setlocal omnifunc=ccomplete#Complete
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType javascript.rals setlocal omnifunc=javascriptcomplete#CompleteJS

" PHP Preferences
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType php let php_sql_query=1
autocmd FileType php let php_html_in_strings=1
autocmd FileType php let php_folding=1

" set php and html for php files
autocmd BufRead *.php setlocal ft=php.html
autocmd BufNewFile *.php setlocal ft=php.html
" 1


" Ruby Preferences
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete foldmethod=syntax
autocmd FileType ruby let rubycomplete_buffer_loading=1
autocmd FileType ruby let rubycomplete_rails=1
autocmd FileType ruby let rubycomplete_classes_in_global=1
" 1

" Latex Preferences
let g:LatexBox_latexmk_options = '-pvc'

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

"1

" remember last cursor position
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" http://vimcasts.org/episodes/tidying-whitespace/
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
